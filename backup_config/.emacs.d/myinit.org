* General Setting
** Initial
#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC
** Reload
#+BEGIN_SRC emacs-lisp
  (defun my/reload-emacs-configuration ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC
** Add MELPA Repo
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
	       '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'custom-theme-load-path "/home/andou/.emacs.d/emacs-color-theme-solarized/")
#+END_SRC
** Emacs Backup Behavier
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
  (setq delet-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC
** History
#+BEGIN_SRC emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
	'(kill-ring
	  search-ring
	  regexp-search-ring))
#+END_SRC
** Don't show startup screen when open file
#+BEGIN_SRC emacs-lisp
  (defun my-inhibit-startup-screen-always ()
    "Startup screen inhibitor for `command-line-functions`.
  Inhibits startup screen on the first unrecognised option."
    (ignore (setq inhibit-startup-screen t)))

  (add-hook 'command-line-functions #'my-inhibit-startup-screen-always)
#+END_SRC
** wrap
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 100)
#+END_SRC
** Auto Complete
#+BEGIN_SRC emacs-lisp
  (ac-config-default)
#+END_SRC
** Start Emacs Server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
** UTF-8
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
* UI
** Time in modeline
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC
** nyan mode
#+BEGIN_SRC emacs-lisp
  (require 'nyan-mode)
  (nyan-mode)
  (nyan-start-animation)
  (nyan-toggle-wavy-trail)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'solarized t)
#+END_SRC
** Mode line format
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line)
#+END_SRC
** Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* IDO
** enable ido
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
* Key
** killing text
#+BEGIN_SRC emacs-lisp
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
	     (line-beginning-position 2)))))
#+END_SRC
* Mode
** General
#+BEGIN_SRC emacs-lisp
  (define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
  (global-fci-mode 1)

  (global-wakatime-mode)
#+END_SRC
** Undo tree mode
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
	       :diminish undo-tree-mode
	       :config
	       (progn
		 (global-undo-tree-mode)
		 (setq undo-tree-visualizer-timestamps t)
		 (setq undo-tree-visualizer-diff t)))
#+END_SRC
** Help-guide-key
#+BEGIN_SRC emacs-lisp
  (use-package guide-key
	       :defer t
	       :diminish guide-key-mode
	       :config
	       (progn
		 (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
		 (guide-key-mode 1)))	; Enable guide-key-mode
#+END_SRC
** winner mode
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :defer t)
#+END_SRC
* General Package
** smex (M-x plugin)
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "C-c M-x") 'execute-extended-command)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* EXWM
#+BEGIN_SRC emacs-lisp
  (require 'exwm-systemtray)
  (exwm-systemtray-enable)
  (require 'exwm)
  (require 'exwm-config)
  (exwm-config-default)
#+END_SRC

