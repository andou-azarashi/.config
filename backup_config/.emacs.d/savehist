;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(yes-or-no-p-history face-name-history buffer-name-history ido-buffer-history ido-file-history minibuffer-history file-name-history extended-command-history shell-command-history))
(setq yes-or-no-p-history '("yes"))
(setq face-name-history '("default"))
(setq buffer-name-history '("Brave-browser" "tictactoe.c" "x.c" "win.h" "config.h" "config.mk" "Makefile" "Brave-browser<2>" "*scratch*" "init.el" "style.css" "st-256color" "init.vim" "myinit.org" "custom.el.gz" "myinit.o" "*Org Src myinit.org[ emacs-lisp ]*"))
(setq ido-buffer-history '("Brave-browser" "tictactoe.c" "x.c" "win.h" "config.h" "config.mk" "Makefile" "Brave-browser<2>" "*scratch*" "init.el" "style.css" "st-256color" "init.vim" "myinit.org" "custom.el.gz" "myinit.el"))
(setq ido-file-history '("." "tictactoe.c" "init.el" "myinit.org" "style.css" "config.h" "init.vim" "myinit.el"))
(setq minibuffer-history '("frame-background-mode" "solarized-theme-1.3.1" "\"" "dracula-theme-1.7.0" "gruvbox-theme-1.28.0" "solarized-theme" "use-package"))
(setq file-name-history '("/home/andou/test_project/tictactoe_c/tictactoe.c" "/home/andou/.emacs.d/init.el" "/home/andou/.emacs.d/myinit.org" "/home/andou/.config/vimb/style.css" "/home/andou/main/st/config.h" "/home/andou/.config/nvim/init.vim" "~/.emacs.d/myinit.org" "~/.emacs.d/myinit.o" "~/.emacs.d/init.el" "/home/andou/.emacs.d/myinit.el"))
(setq extended-command-history '("copy-directory" "copy-file" "dired" "customize-variable" "package-refresh-contents" "package-delete" "customize-themes" "package-install" "customize-face" "load-file"))
(setq shell-command-history '("brave " "st" "steam" "vimb" "reboot" "brave"))
(setq kill-ring '("586e75" #("303030" 0 6 (face (:background #("#303030" 0 7 (fontified t)) :foreground "white" :box (:line-width -1)) fontified t)) #("586e75" 0 6 (face (:background #("#586e75" 0 7 (fontified t)) :foreground "white" :box (:line-width -1)) fontified t)) "586e75" #("f2f0ec" 0 6 (face (:background #("#f2f0ec" 0 7 (fontified t)) :foreground "black" :box (:line-width -1)) fontified t)) "+unsigned int defaultfg = 12;
+unsigned int defaultbg = 8;
+static unsigned int defaultcs = 14;
+static unsigned int defaultrcs = 15;
" #("
" 0 1 (fontified t c-is-sws t)) "+	/* solarized dark */
+	\"#073642\",  /*  0: black    */
+	\"#dc322f\",  /*  1: red      */
+	\"#859900\",  /*  2: green    */
+	\"#b58900\",  /*  3: yellow   */
+	\"#268bd2\",  /*  4: blue     */
+	\"#d33682\",  /*  5: magenta  */
+	\"#2aa198\",  /*  6: cyan     */
+	\"#eee8d5\",  /*  7: white    */
+	\"#002b36\",  /*  8: brblack  */
+	\"#cb4b16\",  /*  9: brred    */
+	\"#586e75\",  /* 10: brgreen  */
+	\"#657b83\",  /* 11: bryellow */
+	\"#839496\",  /* 12: brblue   */
+	\"#6c71c4\",  /* 13: brmagenta*/
+	\"#93a1a1\",  /* 14: brcyan   */
+	\"#fdf6e3\",  /* 15: brwhite  */
" #("(load-theme 'gruvbox-dark-hard t)
" 0 33 (fontified t) 33 34 (fontified t)) #("solarized t)" 0 12 (fontified t)) "#fdf6e3   " "#657b83   " #(";; (load-theme 'solarized t)
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 28 (fontified t face font-lock-comment-face) 28 29 (fontified t)) "(defun my/setup-color-theme ()
  (interactive)
  (when (display-graphic-p) 
     (color-theme-solarized))
  (set-background-color \"black\")
  (set-face-foreground 'secondary-selection \"darkblue\")
  (set-face-background 'secondary-selection \"lightblue\")
  (set-face-background 'font-lock-doc-face \"black\")
  (set-face-foreground 'font-lock-doc-face \"wheat\")
  (set-face-background 'font-lock-string-face \"black\"))
(use-package color-theme-solarized :config (my/setup-color-theme))
" #("  ;; (load-theme 'dracula t)
" 0 2 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 2 5 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 5 28 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 28 29 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("  (load-theme solarized t')
" 0 27 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 27 28 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("(setq solarized-termcolor = 256A" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 28 (fontified t) 28 32 (fontified t)) #(")" 0 1 (fontified t)) "(defun my/setup-color-theme ()
  (interactive)
  (when (display-graphic-p) 
     (color-theme-solarized))
  (set-background-color \"black\")
  (set-face-foreground 'secondary-selection \"darkblue\")
  (set-face-background 'secondary-selection \"lightblue\")
  (set-face-background 'font-lock-doc-face \"black\")
  (set-face-foreground 'font-lock-doc-face \"wheat\")
  (set-face-background 'font-lock-string-face \"black\"))
(use-package color-theme-solarized :config (my/setup-color-theme))
" #("  (color-theme-solarized)
" 0 25 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 25 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("** System clipboard
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC
" 0 1 (fontified t face org-level-2) 1 3 (fontified t face org-level-2) 3 19 (fontified t face org-level-2) 19 20 (fontified t) 20 42 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 42 43 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line help-echo nil) 43 46 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 46 50 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 50 89 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 89 90 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 90 99 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 99 100 (fontified t)) #("
" 0 1 (fontified t)) #("** winner mode
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :defer t)
#+END_SRC" 0 1 (face org-level-2 fontified t) 1 3 (face org-level-2 fontified t) 3 14 (face org-level-2 fontified t) 14 15 (fontified t) 15 37 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 37 38 (help-echo nil face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 38 41 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 41 52 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 52 53 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 53 59 (src-block t help-echo nil face (font-lock-constant-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 59 64 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 64 70 (src-block t help-echo nil face (font-lock-builtin-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 70 73 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 73 74 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 74 83 (face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t)) #("** Undo tree mode
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
	       :diminish undo-tree-mode
	       :config
	       (progn
		 (global-undo-tree-mode)
		 (setq undo-tree-visualizer-timestamps t)
		 (setq undo-tree-visualizer-diff t)))
#+END_SRC" 0 1 (face org-level-2 fontified t) 1 2 (face org-level-2 fontified t) 2 3 (face org-level-2 fontified t) 3 17 (face org-level-2 fontified t) 17 18 (fontified t) 18 40 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 40 41 (face org-block-begin-line font-lock-multiline t help-echo nil font-lock-fontified t fontified t) 41 44 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 44 55 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 55 56 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 56 65 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 65 74 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 74 83 (face (font-lock-builtin-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 83 107 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 107 114 (face (font-lock-builtin-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 114 124 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 124 129 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 129 161 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 161 165 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 165 205 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 205 209 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 209 240 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 240 241 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 241 250 (face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t)) #("   
" 0 4 (fontified t)) #("** winner mode
#+BEGIN_SRC emacs-lisp
  (use-package winner
	       :defer t)
#+END_SRC
" 0 1 (face org-level-2 fontified t) 1 3 (face org-level-2 fontified t) 3 14 (face org-level-2 fontified t) 14 15 (fontified t) 15 37 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 37 38 (help-echo nil face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 38 68 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 68 74 (src-block t help-echo nil face (font-lock-builtin-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 74 77 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 77 78 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 78 87 (face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t) 87 88 (fontified t)) #("
" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)))))
(setq search-ring '("og.mode" "xdrawcursor" "hbtransform(spe" "if (mode & ATTR_" "Clear Harfbu"))
(setq regexp-search-ring 'nil)
